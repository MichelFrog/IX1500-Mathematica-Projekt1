(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     51972,       1155]
NotebookOptionsPosition[     42656,        930]
NotebookOutlinePosition[     50238,       1125]
CellTagsIndexPosition[     50195,       1122]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Report Project 3 ", "Title",
 CellChangeTimes->{{3.7494059167094407`*^9, 
  3.7494059180835195`*^9}},ExpressionUUID->"aaa60fca-4e40-4107-8338-\
8d708efe15fe"],

Cell["\<\
Course code: IX1500
Date: 2018-10-24\
\>", "Text",
 CellChangeTimes->{{3.749396579322373*^9, 
  3.7493965985104704`*^9}},ExpressionUUID->"f98e82b2-eac1-48b8-9c7e-\
1ec06c5bcb4b"],

Cell["\<\
Rikard Jakobsson, rikjak@kth.se
\
\>", "Text",
 CellChangeTimes->{{3.7493961695209336`*^9, 
  3.7493961799805317`*^9}},ExpressionUUID->"028e6a1e-b6fc-4b28-9e22-\
8cf310c2addf"],

Cell[CellGroupData[{

Cell["Task 1: Dijkstra", "Subchapter",
 CellChangeTimes->{{3.7494059116461515`*^9, 
  3.7494059146743245`*^9}},ExpressionUUID->"95d50868-ac9f-4514-bd7c-\
04332671618c"],

Cell[CellGroupData[{

Cell["Summary", "Section",
 CellChangeTimes->{{3.7493974660850925`*^9, 
  3.749397466176098*^9}},ExpressionUUID->"a9736660-edfb-42f3-b9d5-\
5aa2acda89b0"],

Cell[CellGroupData[{

Cell["Task", "Subsection",ExpressionUUID->"c8842fa6-4595-4f4e-a225-a29f3495de1d"],

Cell[TextData[{
 "a) Explain ",
 StyleBox["how",
  FontWeight->"Bold"],
 " Dijkstra\[CloseCurlyQuote]s algorithm works. Use Mathematica graph-methods \
to illustrate your explanation with an animation.\nb) Write your own method \
in Mathematica using the algorithm to produce a shortest path tree. Verify \
and compare you algorithm to the built in function FindShortestPath. You are ",
 StyleBox["expected to have insight",
  FontWeight->"Bold"],
 " in how the algorithm works not just the code."
}], "Text",
 CellChangeTimes->{
  3.74939747198643*^9, 3.7493975023371663`*^9, {3.750681468461703*^9, 
   3.7506814690037336`*^9}},ExpressionUUID->"3c717b2a-af0d-4431-a070-\
805dd45085c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Result", "Subsection",ExpressionUUID->"f57467d2-328a-4f0a-86f4-51a42016c251"],

Cell["\<\
a) Dijskstra\[CloseCurlyQuote]s algorithm finds the shortest path between two \
vertices in a directed weighted graph by using a version of a breath first \
search. It builds a shortest path tree, which is then used to find the \
shortest path between the root node and any other node in the tree.

1. Set the distance to all nodes to \[Infinity], except the initial node, \
which is set to 0. Create a list of visited nodes, and one containing which \
node gives the shortest path to another node, called a parent.
2. Add the root to a priority queue based on total distance to its members.
3.While the queue of nodes is not empty, add all adjacent nodes to the \
current node to the queue if not already there.
4.If the distance to one of these adjacent nodes is larger than the distance \
to the current node and the distance between the two, update the recorded \
distance to this and add the current node as a parent to the adjacent node.
5.When all nodes have been visited the parent list will be a shortest path \
tree.


The animation below shows all the nodes that will be visited and in what \
order when making a search for the shortest path from node \[OpenCurlyQuote]a\
\[CloseCurlyQuote] to node \[OpenCurlyQuote]h\[CloseCurlyQuote]. 
\
\>", "Text",
 CellChangeTimes->{{3.7493989637917566`*^9, 3.7493993256174517`*^9}, {
   3.7496581499380627`*^9, 3.7496581562674246`*^9}, {3.749677801748071*^9, 
   3.7496778052392707`*^9}, {3.7496781296908283`*^9, 
   3.7496782618853893`*^9}, {3.750680209373687*^9, 3.7506802095756984`*^9}, {
   3.750680583104063*^9, 3.7506805970088587`*^9}, {3.7506807119654336`*^9, 
   3.7506807202879095`*^9}, {3.7506817246323547`*^9, 3.750681744903514*^9}, {
   3.7506819268179193`*^9, 3.750682045387701*^9}, {3.7506821376219764`*^9, 
   3.7506821377839856`*^9}, {3.7506821767242126`*^9, 3.750682197810419*^9}, {
   3.7506903967623725`*^9, 3.750690800257451*^9}, {3.750690843331915*^9, 
   3.750690851274369*^9}, {3.750690927912752*^9, 3.750691055940075*^9}, {
   3.7506911670574303`*^9, 3.750691215637209*^9}, 3.7506912953317676`*^9, {
   3.7506913596044436`*^9, 3.7506913662948265`*^9}, {3.7506914714298396`*^9, 
   3.75069147860725*^9}},ExpressionUUID->"64357c78-eb69-462c-b7ab-\
f239e4379180"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = "e", Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], {"a", "c", "f", "b", "d", "e", "e", "g", "h"}}},
     Typeset`size$$ = {360., {101., 108.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$32071$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = "a"}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$32071$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`drawGraph[$CellContext`g2, $CellContext`origin2, \
$CellContext`n$$], 
      "Specifications" :> {{$CellContext`n$$, {
         "a", "c", "f", "b", "d", "e", "e", "g", "h"}, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{411., {140., 147.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Input",
 CellChangeTimes->{{3.750681752835968*^9, 
  3.7506817643876286`*^9}},ExpressionUUID->"cfae5a09-8176-4af6-bb3a-\
8048522bf076"],

Cell[TextData[{
 "b) The code for implementing this algorithm is included in the code section \
below. The function can take any kind of weighted graph, regardless of node \
type. I have included comparisons between the shortest path found by my code \
and by the built in function FindShortestPath. They have both found the same \
path in all of my test graphs. \n.\n",
 Cell[BoxData[{"\<\"From\"\>", "\n", "\<\"a\"\>", "\n", "\<\"To:\"\>", "\n", \
"\<\"g\"\>", "\n", "\<\"Nodes visited:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"f\"\>", ",", "\<\"b\"\>", 
    ",", "\<\"d\"\>", ",", "\<\"g\"\>"}], 
   "}"}], "\n", "\<\"Shortest path own code:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"g\"\>"}], 
   "}"}], "\n", "\<\"Shortest path built in function:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"g\"\>"}], "}"}], "\n", 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`n$$ = "f", Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`n$$], {"a", "c", "f", "b", "d", "g"}}}, 
     Typeset`size$$ = {360., {101., 108.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = 
     True, $CellContext`n$129110$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`n$$ = "a"}, 
       "ControllerVariables" :> {
         Hold[$CellContext`n$$, $CellContext`n$129110$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> $CellContext`drawGraph[$CellContext`g2, \
$CellContext`origin2, $CellContext`n$$], 
       "Specifications" :> {{$CellContext`n$$, {"a", "c", "f", "b", "d", "g"},
           AppearanceElements -> {
           "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
            "DirectionButton"}}}, 
       "Options" :> {
        ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
         "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
         True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
      ImageSizeCache->{411., {140., 147.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Animate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[
   1]], "\n", "\<\"From\"\>", "\n", "\<\"a\"\>", "\n", "\<\"To:\"\>", "\n", "\
\<\"d\"\>", "\n", "\<\"Nodes visited:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "3", ",", "6", ",", "2", ",", "4", ",", "7", ",", "5", ",", "5", 
    ",", "8"}], "}"}], "\n", "\<\"Shortest path own code:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "8"}], 
   "}"}], "\n", "\<\"Shortest path built infunction:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "8"}], "}"}], "\n", 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`n$$ = 8, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`n$$], {1, 3, 6, 2, 4, 7, 5, 5, 8}}}, 
     Typeset`size$$ = {360., {101., 108.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = 
     True, $CellContext`n$129156$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`n$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`n$$, $CellContext`n$129156$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> $CellContext`drawGraph[$CellContext`g, $CellContext`origin, \
$CellContext`n$$], 
       "Specifications" :> {{$CellContext`n$$, {1, 3, 6, 2, 4, 7, 5, 5, 8}, 
          AppearanceElements -> {
           "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
            "DirectionButton"}}}, 
       "Options" :> {
        ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
         "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
         True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
      ImageSizeCache->{411., {140., 147.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Animate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]], "\n", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"\<\"a\"\>", "\<\"b\"\>", "\<\"h\"\>", "\<\"c\"\>", "\<\"d\"\>", \
"\<\"i\"\>"},
      {"0", "8", "2", "18", "19", "\[Infinity]"},
      {"0", "1", "1", "2", "4", "0"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[
    BoxForm`e$]]], "\n", "\<\"From\"\>", "\n", "\<\"a\"\>", "\n", \
"\<\"To:\"\>", "\n", "\<\"d\"\>", "\n", "\<\"Nodes visited:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"h\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
    ",", "\<\"d\"\>"}], "}"}], "\n", "\<\"Shortest path own code:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
    ",", "\<\"d\"\>"}], 
   "}"}], "\n", "\<\"Shortest path built in function:\"\>", "\n", 
  RowBox[{"{", 
   RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
    ",", "\<\"d\"\>"}], "}"}], "\n", 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`n$$ = "c", Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`n$$], {"a", "h", "b", "c", "d"}}}, Typeset`size$$ = {
     360., {163., 169.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`n$129202$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`n$$ = "a"}, 
       "ControllerVariables" :> {
         Hold[$CellContext`n$$, $CellContext`n$129202$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> $CellContext`drawGraph[$CellContext`g3, \
$CellContext`origin3, $CellContext`n$$], 
       "Specifications" :> {{$CellContext`n$$, {"a", "h", "b", "c", "d"}, 
          AppearanceElements -> {
           "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
            "DirectionButton"}}}, 
       "Options" :> {
        ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
         "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
         True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
      ImageSizeCache->{411., {201., 208.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Animate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]]}], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellChangeTimes->{3.7506895346020594`*^9, 3.7506900859095926`*^9},
  ExpressionUUID->"e831fedc-8c44-44e1-a6fd-dbb50ce2e17c"],
 "\n\n"
}], "Text",
 CellChangeTimes->{{3.7506817670657816`*^9, 3.7506818115733275`*^9}, {
   3.7506818576769643`*^9, 3.7506819301461096`*^9}, {3.7506823188773437`*^9, 
   3.7506824116096478`*^9}, {3.750687836380927*^9, 3.750687880913474*^9}, 
   3.7506883017835464`*^9, {3.750688374242691*^9, 3.750688466161948*^9}, 
   3.7506885165618305`*^9, {3.75068905032036*^9, 3.750689068382393*^9}, {
   3.7506893300423594`*^9, 3.750689418508419*^9}, {3.750689708952032*^9, 
   3.7506897301562443`*^9}, {3.7506897800931005`*^9, 3.750689978328439*^9}, {
   3.750690033516596*^9, 3.750690108696896*^9}, {3.7506902735453243`*^9, 
   3.7506903154297204`*^9}},ExpressionUUID->"158dbec1-cd63-481e-b403-\
4a14f940f57f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sources: ", "Subsection",
 CellChangeTimes->{{3.7506817670657816`*^9, 3.7506818115733275`*^9}, {
  3.7506818576769643`*^9, 3.7506819301461096`*^9}, {3.7506823188773437`*^9, 
  3.7506824116096478`*^9}, {3.750687836380927*^9, 3.750687880913474*^9}, {
  3.7506883236617975`*^9, 
  3.750688342993903*^9}},ExpressionUUID->"72770e94-2477-47e3-ba3d-\
ef71f59fed41"],

Cell["\<\
1. \tSedgewick, R. (2011). Algorithms. 4th ed.
2.\tM. Pound (2017, Jan 4) Dijkstra's Algorithm - Computerphile  [Video \
file]. Available: https://www.youtube.com/watch?v=GazC3A4OQTE\
\>", "Text",
 CellChangeTimes->{{3.7506817670657816`*^9, 3.7506818115733275`*^9}, {
   3.7506818576769643`*^9, 3.7506819301461096`*^9}, {3.7506823188773437`*^9, 
   3.7506824116096478`*^9}, {3.750687836380927*^9, 3.750687880913474*^9}, 
   3.7506883236617975`*^9, {3.750691631392989*^9, 
   3.7506916397354665`*^9}},ExpressionUUID->"83eb965f-d3a6-41f8-8d0e-\
797df966dad8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Section",
 CellChangeTimes->{{3.7506885036150904`*^9, 
  3.7506885056022043`*^9}},ExpressionUUID->"095b5deb-9a26-4a57-a201-\
5ac4fe13d061"],

Cell["\<\
I have previously implemented Dijkstra' s algorithm in the course ID1020, so \
I used knowledge from that course as well as the coursebook to write the code \
for this exercise. Since Mathematica is very different from any other \
programming language I\[CloseCurlyQuote]m used to I had to use some \
workarounds, which made it much harder for me to accomplish this. An example \
of this is the while-loop used in place of a proper priority queue, since I \
could not find a way to implement one using Mathematica. My code is also made \
to not keep looking after the desired node has been found, as we know that \
the shortest path to a node has been found when it is at the top of the \
priority queue.\
\>", "Text",
 CellChangeTimes->{{3.750688508642378*^9, 3.750688691121815*^9}, {
  3.750691065080598*^9, 3.750691153338646*^9}, {3.7506913970285845`*^9, 
  3.750691398824687*^9}},ExpressionUUID->"13be340a-c15f-409b-865b-\
8062ea07f523"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "Section",ExpressionUUID->"3fc7a590-29c0-4c73-a0f4-dfa64d0808d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", " ", "=", " ", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"1", "\[Rule]", "6"}], ",", 
       RowBox[{"2", "\[Rule]", "4"}], ",", 
       RowBox[{"2", "\[Rule]", "5"}], ",", 
       RowBox[{"3", "\[Rule]", "7"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"4", "\[Rule]", "5"}], ",", 
       RowBox[{"4", "\[Rule]", "6"}], ",", 
       RowBox[{"5", "\[Rule]", "8"}], ",", 
       RowBox[{"7", "\[Rule]", "3"}], ",", 
       RowBox[{"9", "\[Rule]", "9"}]}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "8", ",", "2", ",", "7", ",", "3", ",", "10", ",", "10", ",", "1", ",",
         "2", ",", "2", ",", "3", ",", "2", ",", "1"}], "}"}]}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g2", " ", "=", " ", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
       RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
       RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
       RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
       RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
       RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
       RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<a\>\""}], ",", 
       RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
       RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
       RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
       RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
       RowBox[{"\"\<i\>\"", "\[Rule]", "\"\<i\>\""}]}], "}"}], ",", 
     RowBox[{"EdgeWeight", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "8", ",", "2", ",", "7", ",", "3", ",", "10", ",", "10", ",", "1", ",",
         "2", ",", "2", ",", "3", ",", "2", ",", "1"}], "}"}]}], ",", 
     RowBox[{"VertexLabels", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g3", " ", "=", " ", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
        RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<a\>\""}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
        RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
        RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
        RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
        RowBox[{"\"\<i\>\"", "\[Rule]", "\"\<i\>\""}]}], "}"}], ",", 
      RowBox[{"EdgeWeight", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "8", ",", "2", ",", "7", ",", "3", ",", "10", ",", "15", ",", "1", 
         ",", "2", ",", "2", ",", "3", ",", "2", ",", "1"}], "}"}]}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"EdgeLabels", "\[Rule]", "\"\<EdgeWeight\>\""}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"distance", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parent", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"path", " ", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dijkstra", "[", 
    RowBox[{"graph_", ",", "from_", ",", "to_"}], "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"parent", " ", "=", " ", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"VertexList", "[", "graph", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"path", " ", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"queue", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"visited", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"test", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vl", " ", "=", " ", 
      RowBox[{"VertexList", "[", "graph", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"posFrom", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"vl", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"n", "==", "from"}]}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"posTo", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"vl", ",", 
          RowBox[{"n_", "/;", 
           RowBox[{"n", "==", "to"}]}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"distance", " ", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"Infinity", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"VertexList", "[", "graph", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"adjacent", " ", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"WeightedAdjacencyMatrix", "[", "graph", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"parent", "[", 
       RowBox[{"[", "posFrom", "]"}], "]"}], " ", "=", "0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"distance", "[", 
       RowBox[{"[", "posFrom", "]"}], "]"}], " ", "=", " ", "0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"addToQueue", "[", "posFrom", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "queue", "]"}], ">", "0"}], " ", ")"}], ",", 
       RowBox[{
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"element", " ", "=", 
           RowBox[{"queue", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"visited", ",", "element"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"test", ",", 
            RowBox[{"vl", "[", 
             RowBox[{"[", "element", "]"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"element", " ", "\[Equal]", " ", "posTo"}], ",", 
            RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"fillDistance", "[", "element", "]"}], ";"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", ")"}], ";", " ", 
        RowBox[{"queue", " ", "=", " ", 
         RowBox[{"Delete", "[", 
          RowBox[{"queue", ",", "1"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"addToQueue", "[", "node_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"queue", ",", "node"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"queue", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"queue", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"distance", "[", 
              RowBox[{"[", "#1", "]"}], "]"}], "<", 
             RowBox[{"distance", "[", 
              RowBox[{"[", "#2", "]"}], "]"}]}], "&"}]}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ")"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fillDistance", "[", "row_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", " ", "=", " ", "1"}], ",", 
         RowBox[{"i", "<", 
          RowBox[{"Length", "[", 
           RowBox[{"adjacent", "[", 
            RowBox[{"[", "row", "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"adjacent", "[", 
               RowBox[{"[", "row", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"distance", " ", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ">", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"adjacent", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "+", 
                    RowBox[{"distance", "[", 
                    RowBox[{"[", "row", "]"}], "]"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"distance", " ", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"adjacent", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "+", 
                    RowBox[{"distance", "[", 
                    RowBox[{"[", "row", "]"}], "]"}]}], ")"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"parent", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "=", "row"}]}], ")"}]}], 
                "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Not", "[", 
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"visited", ",", "i"}], "]"}], "]"}], ")"}], ",", 
                 RowBox[{"addToQueue", "[", "i", "]"}]}], "]"}]}], ")"}], 
             ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p", " ", "=", " ", 
      RowBox[{"parent", "[", 
       RowBox[{"[", "posTo", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"path", ",", 
       RowBox[{"vl", "[", 
        RowBox[{"[", "posTo", "]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"p", "\[NotEqual]", "posFrom"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"path", ",", 
           RowBox[{"vl", "[", 
            RowBox[{"[", "p", "]"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
         ")"}], ";", 
        RowBox[{"p", " ", "=", " ", 
         RowBox[{"parent", "[", 
          RowBox[{"[", "p", "]"}], "]"}]}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"path", ",", 
       RowBox[{"vl", "[", 
        RowBox[{"[", "posFrom", "]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"path", " ", "=", " ", 
      RowBox[{"Reverse", "[", "path", "]"}]}], ";"}], "\[IndentingNewLine]", 
    ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"drawGraph", "[", 
     RowBox[{"graph_", ",", "from_", ",", "to_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"HighlightGraph", "[", 
      RowBox[{"graph", ",", 
       RowBox[{"PathGraph", "[", 
        RowBox[{
         RowBox[{"FindShortestPath", "[", 
          RowBox[{"graph", ",", "from", ",", "to", ",", 
           RowBox[{"Method", "\[Rule]", "\"\<Dijkstra\>\""}]}], "]"}], ",", 
         RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}]}], "]"}], 
     ")"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"origin2", " ", "=", " ", "\"\<a\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"destination2", "=", "\"\<g\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dijkstra", "[", 
    RowBox[{"g2", ",", "origin2", ",", "destination2"}], "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"MatrixForm", "[", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"VertexList", "[", "g2", "]"}], ",", "distance", ",", 
       "parent"}], "}"}], "]"}], "\[IndentingNewLine]", 
    RowBox[{"MatrixForm", "[", "adjacent", "]"}]}], 
   "*)"}]}], "\[IndentingNewLine]", "\"\<From\>\"", "\[IndentingNewLine]", \
"origin2", "\[IndentingNewLine]", "\"\<To:\>\"", "\[IndentingNewLine]", \
"destination2", "\[IndentingNewLine]", "\"\<Nodes visited:\>\"", "\
\[IndentingNewLine]", "test", "\[IndentingNewLine]", "\"\<Shortest path own \
code:\>\"", "\[IndentingNewLine]", "path", "\[IndentingNewLine]", \
"\"\<Shortest path built in function:\>\"", "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FindShortestPath", "[", 
   RowBox[{"g2", ",", "origin2", ",", "destination2"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Animate", "[", 
   RowBox[{
    RowBox[{"drawGraph", "[", 
     RowBox[{"g2", ",", "origin2", ",", "n"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "test"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"origin", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"destination", " ", "=", "8"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dijkstra", "[", 
   RowBox[{"g", ",", "origin", ",", "destination"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", "distance", ",", "parent"}], 
    "}"}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"MatrixForm", "[", "adjacent", "]"}], "\[IndentingNewLine]", 
    "posFrom", "\[IndentingNewLine]", "posTo"}], 
   "*)"}]}], "\[IndentingNewLine]", "\"\<From\>\"", "\[IndentingNewLine]", \
"origin3", "\[IndentingNewLine]", "\"\<To:\>\"", "\[IndentingNewLine]", \
"destination3", "\[IndentingNewLine]", "\"\<Nodes visited:\>\"", "\
\[IndentingNewLine]", "test", "\[IndentingNewLine]", "\"\<Shortest path own \
code:\>\"", "\[IndentingNewLine]", "path", "\[IndentingNewLine]", \
"\"\<Shortest path built infunction:\>\"", "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FindShortestPath", "[", 
   RowBox[{"g", ",", "origin", ",", "destination"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Animate", "[", 
   RowBox[{
    RowBox[{"drawGraph", "[", 
     RowBox[{"g", ",", "origin", ",", "n"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "test"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"origin3", " ", "=", " ", "\"\<a\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"destination3", "=", "\"\<d\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dijkstra", "[", 
   RowBox[{"g3", ",", "origin3", ",", "destination3"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"VertexList", "[", "g3", "]"}], ",", "distance", ",", "parent"}],
     "}"}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"MatrixForm", "[", "adjacent", "]"}], 
   "*)"}]}], "\[IndentingNewLine]", "\"\<From\>\"", "\[IndentingNewLine]", \
"origin3", "\[IndentingNewLine]", "\"\<To:\>\"", "\[IndentingNewLine]", \
"destination3", "\[IndentingNewLine]", "\"\<Nodes visited:\>\"", "\
\[IndentingNewLine]", "test", "\[IndentingNewLine]", "\"\<Shortest path own \
code:\>\"", "\[IndentingNewLine]", "path", "\[IndentingNewLine]", \
"\"\<Shortest path built in function:\>\"", "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FindShortestPath", "[", 
   RowBox[{"g3", ",", "origin3", ",", "destination3"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"drawGraph", "[", 
    RowBox[{"g3", ",", "origin3", ",", "n"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "test"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.749395548151393*^9, 3.7493955636082773`*^9}, {
   3.749395609691913*^9, 3.749395751075*^9}, {3.749395783846874*^9, 
   3.7493958036120048`*^9}, {3.749395947404229*^9, 3.749396007751681*^9}, {
   3.749396431300906*^9, 3.749396466763935*^9}, {3.7493965281564465`*^9, 
   3.749396530997609*^9}, {3.7493967608307543`*^9, 3.7493967744595337`*^9}, {
   3.74939731778061*^9, 3.7493973732087803`*^9}, {3.74939752582251*^9, 
   3.7493975887121067`*^9}, {3.7493986399912367`*^9, 3.749398847296094*^9}, {
   3.7493989026922617`*^9, 3.7493989085065947`*^9}, {3.7493994381178865`*^9, 
   3.749399446191348*^9}, {3.7493998841964006`*^9, 3.7494000741512656`*^9}, {
   3.749400105941084*^9, 3.749400141741132*^9}, 3.749400175001034*^9, {
   3.749400210665074*^9, 3.7494002170594397`*^9}, {3.7494002904906397`*^9, 
   3.749400316095104*^9}, {3.7494003467718587`*^9, 3.7494003564414115`*^9}, {
   3.7494003893482943`*^9, 3.749400478569397*^9}, {3.7494005827003527`*^9, 
   3.749400692234618*^9}, 3.7494007310028353`*^9, {3.7494008729839563`*^9, 
   3.749400881554446*^9}, {3.749657715114192*^9, 3.7496577838401227`*^9}, {
   3.749657900972822*^9, 3.749657956466996*^9}, {3.7496580328573656`*^9, 
   3.7496580408658237`*^9}, {3.749659101896511*^9, 3.749659114412227*^9}, {
   3.749661825239278*^9, 3.749661949383378*^9}, {3.7496620528512964`*^9, 
   3.7496620872792654`*^9}, {3.749663338390825*^9, 3.7496633715137196`*^9}, {
   3.7496634088588552`*^9, 3.749663754111603*^9}, 3.749663875240531*^9, {
   3.7496639113185945`*^9, 3.749663912918686*^9}, {3.749663960834427*^9, 
   3.7496639643246264`*^9}, {3.7496640584620104`*^9, 
   3.7496640614351807`*^9}, {3.7496641351643977`*^9, 
   3.7496641436438828`*^9}, {3.7496642218063536`*^9, 
   3.7496643414701977`*^9}, {3.74966441547243*^9, 3.7496644512294755`*^9}, {
   3.7496645652479973`*^9, 3.749664581275914*^9}, {3.7496646941413693`*^9, 
   3.7496647446682596`*^9}, {3.749664846797101*^9, 3.749664918974229*^9}, {
   3.7496649832739067`*^9, 3.749664985637042*^9}, {3.7496650197359924`*^9, 
   3.749665052635874*^9}, {3.749665204684571*^9, 3.749665237449445*^9}, {
   3.7496652716924033`*^9, 3.7496653612115235`*^9}, {3.7496654156576376`*^9, 
   3.7496654210849485`*^9}, {3.749665506213817*^9, 3.749665511472118*^9}, {
   3.749665626691708*^9, 3.749665656237398*^9}, {3.7496657075953355`*^9, 
   3.7496657105315037`*^9}, {3.7496657707569485`*^9, 3.749665790742091*^9}, {
   3.749666205397808*^9, 3.7496662436019936`*^9}, {3.7496663019283295`*^9, 
   3.749666314826067*^9}, {3.7496664257684126`*^9, 3.749666523906026*^9}, {
   3.749666570281678*^9, 3.749666608716877*^9}, {3.7496667030032697`*^9, 
   3.749666718373149*^9}, {3.7496667853519797`*^9, 3.7496668263083224`*^9}, {
   3.7496668806494303`*^9, 3.749666906237894*^9}, {3.7496681554963474`*^9, 
   3.7496681814538326`*^9}, {3.7496684525543385`*^9, 3.749668676325137*^9}, {
   3.749668721396715*^9, 3.7496687463461423`*^9}, {3.7496688885662766`*^9, 
   3.749668889833349*^9}, {3.749668935530963*^9, 3.7496689364480157`*^9}, {
   3.7496690183797016`*^9, 3.749669053480709*^9}, {3.749669120173524*^9, 
   3.7496691553965387`*^9}, {3.7496692785855846`*^9, 
   3.7496693645945044`*^9}, {3.749669396714341*^9, 3.749669421795776*^9}, {
   3.74966956226481*^9, 3.749669578590744*^9}, {3.749669630772729*^9, 
   3.7496696423623915`*^9}, {3.7496697613511972`*^9, 3.749669773865913*^9}, {
   3.7496700705478716`*^9, 3.7496700975524163`*^9}, {3.749670133194455*^9, 
   3.7496701467172284`*^9}, {3.7496702161752014`*^9, 3.7496703260004826`*^9}, 
   3.7496703768003883`*^9, {3.7496704122764177`*^9, 3.749670432202557*^9}, {
   3.7496705340423822`*^9, 3.7496705556246166`*^9}, {3.7496706068015437`*^9, 
   3.74967060831363*^9}, {3.7496708767639847`*^9, 3.7496708826333203`*^9}, {
   3.7496709615628347`*^9, 3.749670964894026*^9}, {3.7496710918622875`*^9, 
   3.749671336656289*^9}, {3.749671366851016*^9, 3.749671413807702*^9}, {
   3.749671455999115*^9, 3.749671536471718*^9}, {3.7496716861492786`*^9, 
   3.749671698391979*^9}, {3.7496718250272226`*^9, 3.7496720345202045`*^9}, {
   3.749672156508182*^9, 3.74967219633446*^9}, {3.7496723316111975`*^9, 
   3.749672447868847*^9}, {3.749672480654722*^9, 3.749672500760872*^9}, {
   3.749672678465036*^9, 3.7496726962900553`*^9}, {3.7496727421146765`*^9, 
   3.7496727559574685`*^9}, {3.7496727967448015`*^9, 3.749672828157598*^9}, {
   3.7496728670318213`*^9, 3.7496729255821705`*^9}, {3.7496730172534137`*^9, 
   3.749673068187327*^9}, {3.7496731020772657`*^9, 3.74967310355735*^9}, {
   3.7496732840916758`*^9, 3.749673337681741*^9}, {3.7496734834350777`*^9, 
   3.7496734880803432`*^9}, {3.7496735425284576`*^9, 3.749673549482856*^9}, {
   3.7496736025998936`*^9, 3.749673684895601*^9}, {3.7496739308856707`*^9, 
   3.7496739354509315`*^9}, {3.7496739664487047`*^9, 3.749673969760894*^9}, {
   3.749674011492281*^9, 3.7496742429195175`*^9}, 3.7496742867370243`*^9, {
   3.749674502445362*^9, 3.749674575371533*^9}, {3.749674618062975*^9, 
   3.7496746567541876`*^9}, {3.7496746881549835`*^9, 
   3.7496747351276703`*^9}, {3.749674793237994*^9, 3.7496749110607333`*^9}, {
   3.7496750364519053`*^9, 3.749675114324359*^9}, {3.7496752710273223`*^9, 
   3.7496753320818143`*^9}, 3.749675555398587*^9, {3.7496757183209057`*^9, 
   3.7496757183999104`*^9}, {3.7496758148364267`*^9, 
   3.7496758454551773`*^9}, {3.749675964003958*^9, 3.7496759663160906`*^9}, {
   3.7496760833587847`*^9, 3.749676085491907*^9}, 3.7496761247381516`*^9, {
   3.749676154990882*^9, 3.749676211127093*^9}, {3.7496762444980016`*^9, 
   3.7496762466631255`*^9}, {3.7496763102137604`*^9, 
   3.7496763223814564`*^9}, {3.7496765595870237`*^9, 3.749676586325553*^9}, {
   3.7496766241927185`*^9, 3.7496766270748835`*^9}, {3.7496767009941115`*^9, 
   3.749676761734586*^9}, {3.749676824845196*^9, 3.7496769125752134`*^9}, {
   3.749676945137076*^9, 3.749676957380776*^9}, {3.749677029957927*^9, 
   3.749677048642996*^9}, {3.749677102340067*^9, 3.7496771047562056`*^9}, {
   3.749677155131087*^9, 3.749677155299096*^9}, {3.7496771952123795`*^9, 
   3.7496772171266327`*^9}, {3.7496772757189837`*^9, 
   3.7496773046076365`*^9}, {3.749677396770908*^9, 3.749677399450061*^9}, {
   3.749677784086061*^9, 3.7496777884943132`*^9}, 3.7496778554811444`*^9, {
   3.749677916875656*^9, 3.7496780521543937`*^9}, {3.749894758604764*^9, 
   3.749894809647683*^9}, {3.749894869543109*^9, 3.749894901534939*^9}, {
   3.7498951399635763`*^9, 3.7498951432527647`*^9}, {3.749895229857718*^9, 
   3.7498953634963617`*^9}, {3.749895435199463*^9, 3.7498954527844687`*^9}, 
   3.749895542695611*^9, {3.749895609322422*^9, 3.7498956253063364`*^9}, {
   3.7498956941512737`*^9, 3.7498956976854763`*^9}, 3.7498957532956567`*^9, {
   3.750689485173232*^9, 
   3.7506895313778753`*^9}},ExpressionUUID->"0e5e24f0-d089-4431-8d38-\
71c67f8395b9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1038},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
PageHeaders->{{None, None, None}, {
   Cell[
    TextData[{"KTH/ICT - Kommunikationssystem"}], "PageHeader", FontFamily -> 
    "Arial", FontSize -> 9], None, None}},
PageFooters->{{None, None, None}, {None, 
   Cell[
    TextData[{
      CounterBox["Page"]}], "PageNumber"], None}},
PrintingOptions->{"FacingPages"->False},
TrackCellChangeTimes->True,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell["Modify the definitions below to change the default appearance of all \
cells in a given style. \nMake modifications to any definition using commands \
in the Format menu.", "Text"], 
   Cell[
    CellGroupData[{
      Cell["Notebook Options Settings", "Section"], 
      Cell[
       StyleData["Notebook"], ShowCellBracket -> Automatic]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Title", "Subsection"], 
         Cell[
          StyleData["Title"], FontFamily -> "Arial", FontSize -> 36, 
          FontWeight -> "Bold", FontColor -> GrayLevel[0.5]], 
         Cell[
          StyleData["Subtitle"], FontFamily -> "Arial", FontWeight -> "Bold"], 
         Cell[
          StyleData["Subsubtitle"], FontFamily -> "Arial", FontSize -> 18]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Chapter", "Subsection", 
          CellChangeTimes -> {{3.6182073006504073`*^9, 
           3.6182073204926414`*^9}}], 
         Cell[
          StyleData["Chapter"], FontFamily -> "Arial", FontSize -> 34, 
          FontWeight -> "Plain", FontSlant -> "Plain", 
          FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
         Cell[
          StyleData["Subchapter"], CellDingbat -> 
          StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
            RGBColor[
            0.09803921568627451, 0.32941176470588235`, 0.6509803921568628]], 
          FontFamily -> "Arial", FontSize -> 28, FontWeight -> "Plain", 
          FontSlant -> "Plain", 
          FontVariations -> {
           "StrikeThrough" -> False, "Underline" -> False}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Section", "Subsection"], 
         Cell[
          StyleData["Section"], CellDingbat -> None, ShowGroupOpener -> True, 
          FontFamily -> "Arial", FontSize -> 24, FontWeight -> "Bold", 
          FontColor -> GrayLevel[0.5]], 
         Cell[
          StyleData["Subsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, CellMargins -> {{40., 3.}, {8., 12.}}, FontFamily -> "Arial", 
          FontSize -> 18, FontWeight -> "Bold", FontColor -> GrayLevel[0.3]], 
         Cell[
          StyleData["Subsubsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, CellMargins -> {{53., Inherited}, {2, 10}}, FontFamily -> 
          "Arial", FontSize -> 16, FontWeight -> "Bold", FontColor -> 
          GrayLevel[0.]], 
         Cell[
          StyleData["Subsubsubsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, MenuSortingValue -> 1400, FontFamily -> "Arial Narrow", 
          FontSize -> 14, FontWeight -> "Bold", FontSlant -> "Plain", 
          FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
          FontColor -> GrayLevel[0]]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Text", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Standard", "Subsection"], 
         Cell[
          StyleData["Text"], FontFamily -> "Times"], 
         Cell[
          StyleData["SmallText"], MenuSortingValue -> 1425, FontFamily -> 
          "Times"]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Display", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell["Lists", "Subsubsection"], 
            Cell[
             StyleData["Item"], CellDingbat -> 
             StyleBox["\[FilledCircle]", Alignment -> Baseline, 
               GrayLevel[0.3]], FontFamily -> "Times"], 
            Cell[
             StyleData["ItemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["Subitem"], CellDingbat -> 
             StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
               GrayLevel[0.3]], FontFamily -> "Times"], 
            Cell[
             StyleData["SubitemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["Subsubitem"], CellDingbat -> 
             StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
               GrayLevel[0.5]], FontFamily -> "Times"], 
            Cell[
             StyleData["SubsubitemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["ItemNumbered"], FontFamily -> "Times"], 
            Cell[
             StyleData["SubitemNumbered"], FontFamily -> "Times"], 
            Cell[
             StyleData["SubsubitemNumbered"], FontFamily -> "Times"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell["Templates", "Subsubsection"], 
            Cell[
             StyleData[
             "SideCaptionArray", StyleDefinitions -> StyleData["Text"]], 
             GridBoxOptions -> {
              GridBoxAlignment -> {"Columns" -> {Left}, "Rows" -> {Center}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}}], 
            Cell[
             StyleData[
             "SideCaption", StyleDefinitions -> StyleData["SmallText"]]]}, 
           Closed]]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       StyleData["Input"], ShowCellBracket -> True], 
      Cell[
       StyleData["InputOnly"], ShowCellBracket -> True], 
      Cell[
       StyleData["Code"], ShowCellBracket -> True], 
      Cell[
       StyleData["Output"], ShowCellBracket -> True], 
      Cell[
       StyleData["Message"], ShowCellBracket -> True], 
      Cell[
       StyleData["Print"], ShowCellBracket -> True]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Formulas and Programming", "Section"], 
      Cell[
       StyleData["InlineFormula"]], 
      Cell[
       StyleData["DisplayFormula"], FontFamily -> "Times"], 
      Cell[
       StyleData["DisplayFormulaNumbered"], FontFamily -> "Times"], 
      Cell[
       StyleData["Program"], ShowCellBracket -> True]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Citation Styles", "Section"], 
      Cell[
       StyleData["Reference"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       TextData[{"Styles for ", 
         StyleBox["Mathematica", FontSlant -> "Italic"], 
         " System\[Hyphen]specific Elements"}], "Section"], 
      Cell[
       CellGroupData[{
         Cell["Default Box Styles", "Subsection"], 
         Cell[
          StyleData["Graphics"], FontFamily -> "Times"], 
         Cell[
          StyleData["Graphics3D"], FontFamily -> "Times"], 
         Cell[
          StyleData["NetworkGraphics"], FontFamily -> "Times"]}, Closed]]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "11.2 for Microsoft Windows (64-bit) (September 10, 2017)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 164, 3, 83, "Title",ExpressionUUID->"aaa60fca-4e40-4107-8338-8d708efe15fe"],
Cell[747, 27, 188, 6, 52, "Text",ExpressionUUID->"f98e82b2-eac1-48b8-9c7e-1ec06c5bcb4b"],
Cell[938, 35, 186, 6, 52, "Text",ExpressionUUID->"028e6a1e-b6fc-4b28-9e22-8cf310c2addf"],
Cell[CellGroupData[{
Cell[1149, 45, 168, 3, 61, "Subchapter",ExpressionUUID->"95d50868-ac9f-4514-bd7c-04332671618c"],
Cell[CellGroupData[{
Cell[1342, 52, 154, 3, 60, "Section",ExpressionUUID->"a9736660-edfb-42f3-b9d5-5aa2acda89b0"],
Cell[CellGroupData[{
Cell[1521, 59, 81, 0, 41, "Subsection",ExpressionUUID->"c8842fa6-4595-4f4e-a225-a29f3495de1d"],
Cell[1605, 61, 686, 15, 54, "Text",ExpressionUUID->"3c717b2a-af0d-4431-a070-805dd45085c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2328, 81, 83, 0, 41, "Subsection",ExpressionUUID->"f57467d2-328a-4f0a-86f4-51a42016c251"],
Cell[2414, 83, 2245, 37, 232, "Text",ExpressionUUID->"64357c78-eb69-462c-b7ab-f239e4379180"],
Cell[4662, 122, 2131, 44, 302, "Input",ExpressionUUID->"cfae5a09-8176-4af6-bb3a-8048522bf076"],
Cell[6796, 168, 9589, 193, 1798, "Text",ExpressionUUID->"158dbec1-cd63-481e-b403-4a14f940f57f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16422, 366, 364, 6, 41, "Subsection",ExpressionUUID->"72770e94-2477-47e3-ba3d-ef71f59fed41"],
Cell[16789, 374, 567, 10, 52, "Text",ExpressionUUID->"83eb965f-d3a6-41f8-8d0e-797df966dad8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17405, 390, 159, 3, 60, "Section",ExpressionUUID->"095b5deb-9a26-4a57-a201-5ac4fe13d061"],
Cell[17567, 395, 951, 15, 72, "Text",ExpressionUUID->"13be340a-c15f-409b-865b-8062ea07f523"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18555, 415, 78, 0, 60, "Section",ExpressionUUID->"3fc7a590-29c0-4c73-a0f4-dfa64d0808d7"],
Cell[18636, 417, 23980, 508, 2157, "Input",ExpressionUUID->"0e5e24f0-d089-4431-8d38-71c67f8395b9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

